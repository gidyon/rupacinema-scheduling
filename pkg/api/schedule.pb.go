// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schedule.proto

package scheduler

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
	proto1 "movie/api/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Show for a particular time of day
type ShowSchedule struct {
	PlayTime             string          `protobuf:"bytes,1,opt,name=play_time,json=playTime,proto3" json:"play_time,omitempty"`
	Movie                *proto1.Movie   `protobuf:"bytes,2,opt,name=movie,proto3" json:"movie,omitempty"`
	VotedMovies          []*proto1.Movie `protobuf:"bytes,3,rep,name=voted_movies,json=votedMovies,proto3" json:"voted_movies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ShowSchedule) Reset()         { *m = ShowSchedule{} }
func (m *ShowSchedule) String() string { return proto.CompactTextString(m) }
func (*ShowSchedule) ProtoMessage()    {}
func (*ShowSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00842e68e05382a, []int{0}
}

func (m *ShowSchedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowSchedule.Unmarshal(m, b)
}
func (m *ShowSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowSchedule.Marshal(b, m, deterministic)
}
func (m *ShowSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowSchedule.Merge(m, src)
}
func (m *ShowSchedule) XXX_Size() int {
	return xxx_messageInfo_ShowSchedule.Size(m)
}
func (m *ShowSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_ShowSchedule proto.InternalMessageInfo

func (m *ShowSchedule) GetPlayTime() string {
	if m != nil {
		return m.PlayTime
	}
	return ""
}

func (m *ShowSchedule) GetMovie() *proto1.Movie {
	if m != nil {
		return m.Movie
	}
	return nil
}

func (m *ShowSchedule) GetVotedMovies() []*proto1.Movie {
	if m != nil {
		return m.VotedMovies
	}
	return nil
}

// Shows in a day. E.g 1, 2, 3, 4
type ShowsSchedule struct {
	ShowsSchedule        map[int32]*ShowSchedule `protobuf:"bytes,1,rep,name=shows_schedule,json=showsSchedule,proto3" json:"shows_schedule,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ShowsSchedule) Reset()         { *m = ShowsSchedule{} }
func (m *ShowsSchedule) String() string { return proto.CompactTextString(m) }
func (*ShowsSchedule) ProtoMessage()    {}
func (*ShowsSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00842e68e05382a, []int{1}
}

func (m *ShowsSchedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowsSchedule.Unmarshal(m, b)
}
func (m *ShowsSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowsSchedule.Marshal(b, m, deterministic)
}
func (m *ShowsSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowsSchedule.Merge(m, src)
}
func (m *ShowsSchedule) XXX_Size() int {
	return xxx_messageInfo_ShowsSchedule.Size(m)
}
func (m *ShowsSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowsSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_ShowsSchedule proto.InternalMessageInfo

func (m *ShowsSchedule) GetShowsSchedule() map[int32]*ShowSchedule {
	if m != nil {
		return m.ShowsSchedule
	}
	return nil
}

// Shows playing in a day for a particular screen
type ScreensSchedule struct {
	ScreensSchedule      map[string]*ShowsSchedule `protobuf:"bytes,1,rep,name=screens_schedule,json=screensSchedule,proto3" json:"screens_schedule,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ScreensSchedule) Reset()         { *m = ScreensSchedule{} }
func (m *ScreensSchedule) String() string { return proto.CompactTextString(m) }
func (*ScreensSchedule) ProtoMessage()    {}
func (*ScreensSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00842e68e05382a, []int{2}
}

func (m *ScreensSchedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScreensSchedule.Unmarshal(m, b)
}
func (m *ScreensSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScreensSchedule.Marshal(b, m, deterministic)
}
func (m *ScreensSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScreensSchedule.Merge(m, src)
}
func (m *ScreensSchedule) XXX_Size() int {
	return xxx_messageInfo_ScreensSchedule.Size(m)
}
func (m *ScreensSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_ScreensSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_ScreensSchedule proto.InternalMessageInfo

func (m *ScreensSchedule) GetScreensSchedule() map[string]*ShowsSchedule {
	if m != nil {
		return m.ScreensSchedule
	}
	return nil
}

// Shows schedule for a particular day of the week
type DaysSchedule struct {
	DaysSchedule         map[int32]*ScreensSchedule `protobuf:"bytes,1,rep,name=days_schedule,json=daysSchedule,proto3" json:"days_schedule,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DaysSchedule) Reset()         { *m = DaysSchedule{} }
func (m *DaysSchedule) String() string { return proto.CompactTextString(m) }
func (*DaysSchedule) ProtoMessage()    {}
func (*DaysSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00842e68e05382a, []int{3}
}

func (m *DaysSchedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaysSchedule.Unmarshal(m, b)
}
func (m *DaysSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaysSchedule.Marshal(b, m, deterministic)
}
func (m *DaysSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaysSchedule.Merge(m, src)
}
func (m *DaysSchedule) XXX_Size() int {
	return xxx_messageInfo_DaysSchedule.Size(m)
}
func (m *DaysSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_DaysSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_DaysSchedule proto.InternalMessageInfo

func (m *DaysSchedule) GetDaysSchedule() map[int32]*ScreensSchedule {
	if m != nil {
		return m.DaysSchedule
	}
	return nil
}

// Request to vote up a movie
type VoteUpMovieRequest struct {
	MovieId              string   `protobuf:"bytes,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Screen               string   `protobuf:"bytes,5,opt,name=screen,proto3" json:"screen,omitempty"`
	ShowTime             string   `protobuf:"bytes,6,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
	WeekDay              int32    `protobuf:"varint,3,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`
	ShowNumber           int32    `protobuf:"varint,4,opt,name=show_number,json=showNumber,proto3" json:"show_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteUpMovieRequest) Reset()         { *m = VoteUpMovieRequest{} }
func (m *VoteUpMovieRequest) String() string { return proto.CompactTextString(m) }
func (*VoteUpMovieRequest) ProtoMessage()    {}
func (*VoteUpMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00842e68e05382a, []int{4}
}

func (m *VoteUpMovieRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteUpMovieRequest.Unmarshal(m, b)
}
func (m *VoteUpMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteUpMovieRequest.Marshal(b, m, deterministic)
}
func (m *VoteUpMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteUpMovieRequest.Merge(m, src)
}
func (m *VoteUpMovieRequest) XXX_Size() int {
	return xxx_messageInfo_VoteUpMovieRequest.Size(m)
}
func (m *VoteUpMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteUpMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VoteUpMovieRequest proto.InternalMessageInfo

func (m *VoteUpMovieRequest) GetMovieId() string {
	if m != nil {
		return m.MovieId
	}
	return ""
}

func (m *VoteUpMovieRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *VoteUpMovieRequest) GetScreen() string {
	if m != nil {
		return m.Screen
	}
	return ""
}

func (m *VoteUpMovieRequest) GetShowTime() string {
	if m != nil {
		return m.ShowTime
	}
	return ""
}

func (m *VoteUpMovieRequest) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

func (m *VoteUpMovieRequest) GetShowNumber() int32 {
	if m != nil {
		return m.ShowNumber
	}
	return 0
}

// Request to get schedule
type GetDayScheduleRequest struct {
	WeekDay              int32    `protobuf:"varint,1,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDayScheduleRequest) Reset()         { *m = GetDayScheduleRequest{} }
func (m *GetDayScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*GetDayScheduleRequest) ProtoMessage()    {}
func (*GetDayScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00842e68e05382a, []int{5}
}

func (m *GetDayScheduleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDayScheduleRequest.Unmarshal(m, b)
}
func (m *GetDayScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDayScheduleRequest.Marshal(b, m, deterministic)
}
func (m *GetDayScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDayScheduleRequest.Merge(m, src)
}
func (m *GetDayScheduleRequest) XXX_Size() int {
	return xxx_messageInfo_GetDayScheduleRequest.Size(m)
}
func (m *GetDayScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDayScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDayScheduleRequest proto.InternalMessageInfo

func (m *GetDayScheduleRequest) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

// Request to get show
type GetShowScheduleRequest struct {
	WeekDay              int32    `protobuf:"varint,1,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`
	Show                 int32    `protobuf:"varint,2,opt,name=show,proto3" json:"show,omitempty"`
	Screen               string   `protobuf:"bytes,3,opt,name=screen,proto3" json:"screen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetShowScheduleRequest) Reset()         { *m = GetShowScheduleRequest{} }
func (m *GetShowScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*GetShowScheduleRequest) ProtoMessage()    {}
func (*GetShowScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00842e68e05382a, []int{6}
}

func (m *GetShowScheduleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetShowScheduleRequest.Unmarshal(m, b)
}
func (m *GetShowScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetShowScheduleRequest.Marshal(b, m, deterministic)
}
func (m *GetShowScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShowScheduleRequest.Merge(m, src)
}
func (m *GetShowScheduleRequest) XXX_Size() int {
	return xxx_messageInfo_GetShowScheduleRequest.Size(m)
}
func (m *GetShowScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShowScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShowScheduleRequest proto.InternalMessageInfo

func (m *GetShowScheduleRequest) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

func (m *GetShowScheduleRequest) GetShow() int32 {
	if m != nil {
		return m.Show
	}
	return 0
}

func (m *GetShowScheduleRequest) GetScreen() string {
	if m != nil {
		return m.Screen
	}
	return ""
}

// Request to add a movie to the voted movie section
type AddVotedMovieRequest struct {
	WeekDay              int32    `protobuf:"varint,1,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`
	Show                 int32    `protobuf:"varint,2,opt,name=show,proto3" json:"show,omitempty"`
	Screen               string   `protobuf:"bytes,3,opt,name=screen,proto3" json:"screen,omitempty"`
	MovieId              string   `protobuf:"bytes,4,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddVotedMovieRequest) Reset()         { *m = AddVotedMovieRequest{} }
func (m *AddVotedMovieRequest) String() string { return proto.CompactTextString(m) }
func (*AddVotedMovieRequest) ProtoMessage()    {}
func (*AddVotedMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00842e68e05382a, []int{7}
}

func (m *AddVotedMovieRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddVotedMovieRequest.Unmarshal(m, b)
}
func (m *AddVotedMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddVotedMovieRequest.Marshal(b, m, deterministic)
}
func (m *AddVotedMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddVotedMovieRequest.Merge(m, src)
}
func (m *AddVotedMovieRequest) XXX_Size() int {
	return xxx_messageInfo_AddVotedMovieRequest.Size(m)
}
func (m *AddVotedMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddVotedMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddVotedMovieRequest proto.InternalMessageInfo

func (m *AddVotedMovieRequest) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

func (m *AddVotedMovieRequest) GetShow() int32 {
	if m != nil {
		return m.Show
	}
	return 0
}

func (m *AddVotedMovieRequest) GetScreen() string {
	if m != nil {
		return m.Screen
	}
	return ""
}

func (m *AddVotedMovieRequest) GetMovieId() string {
	if m != nil {
		return m.MovieId
	}
	return ""
}

// Request to create a new show schedule for a day
type CreateMovieDayScheduleRequest struct {
	WeekDay              int32    `protobuf:"varint,1,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`
	Show                 int32    `protobuf:"varint,2,opt,name=show,proto3" json:"show,omitempty"`
	Screen               string   `protobuf:"bytes,3,opt,name=screen,proto3" json:"screen,omitempty"`
	MovieId              string   `protobuf:"bytes,4,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMovieDayScheduleRequest) Reset()         { *m = CreateMovieDayScheduleRequest{} }
func (m *CreateMovieDayScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMovieDayScheduleRequest) ProtoMessage()    {}
func (*CreateMovieDayScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00842e68e05382a, []int{8}
}

func (m *CreateMovieDayScheduleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMovieDayScheduleRequest.Unmarshal(m, b)
}
func (m *CreateMovieDayScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMovieDayScheduleRequest.Marshal(b, m, deterministic)
}
func (m *CreateMovieDayScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMovieDayScheduleRequest.Merge(m, src)
}
func (m *CreateMovieDayScheduleRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMovieDayScheduleRequest.Size(m)
}
func (m *CreateMovieDayScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMovieDayScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMovieDayScheduleRequest proto.InternalMessageInfo

func (m *CreateMovieDayScheduleRequest) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

func (m *CreateMovieDayScheduleRequest) GetShow() int32 {
	if m != nil {
		return m.Show
	}
	return 0
}

func (m *CreateMovieDayScheduleRequest) GetScreen() string {
	if m != nil {
		return m.Screen
	}
	return ""
}

func (m *CreateMovieDayScheduleRequest) GetMovieId() string {
	if m != nil {
		return m.MovieId
	}
	return ""
}

// Request to delete a show schedule for a day
type DeleteMovieDayScheduleRequest struct {
	WeekDay              int32    `protobuf:"varint,1,opt,name=week_day,json=weekDay,proto3" json:"week_day,omitempty"`
	Show                 int32    `protobuf:"varint,2,opt,name=show,proto3" json:"show,omitempty"`
	Screen               string   `protobuf:"bytes,3,opt,name=screen,proto3" json:"screen,omitempty"`
	MovieId              string   `protobuf:"bytes,4,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMovieDayScheduleRequest) Reset()         { *m = DeleteMovieDayScheduleRequest{} }
func (m *DeleteMovieDayScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMovieDayScheduleRequest) ProtoMessage()    {}
func (*DeleteMovieDayScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00842e68e05382a, []int{9}
}

func (m *DeleteMovieDayScheduleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMovieDayScheduleRequest.Unmarshal(m, b)
}
func (m *DeleteMovieDayScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMovieDayScheduleRequest.Marshal(b, m, deterministic)
}
func (m *DeleteMovieDayScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieDayScheduleRequest.Merge(m, src)
}
func (m *DeleteMovieDayScheduleRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteMovieDayScheduleRequest.Size(m)
}
func (m *DeleteMovieDayScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieDayScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieDayScheduleRequest proto.InternalMessageInfo

func (m *DeleteMovieDayScheduleRequest) GetWeekDay() int32 {
	if m != nil {
		return m.WeekDay
	}
	return 0
}

func (m *DeleteMovieDayScheduleRequest) GetShow() int32 {
	if m != nil {
		return m.Show
	}
	return 0
}

func (m *DeleteMovieDayScheduleRequest) GetScreen() string {
	if m != nil {
		return m.Screen
	}
	return ""
}

func (m *DeleteMovieDayScheduleRequest) GetMovieId() string {
	if m != nil {
		return m.MovieId
	}
	return ""
}

func init() {
	proto.RegisterType((*ShowSchedule)(nil), "rupacinema.movie.ShowSchedule")
	proto.RegisterType((*ShowsSchedule)(nil), "rupacinema.movie.ShowsSchedule")
	proto.RegisterMapType((map[int32]*ShowSchedule)(nil), "rupacinema.movie.ShowsSchedule.ShowsScheduleEntry")
	proto.RegisterType((*ScreensSchedule)(nil), "rupacinema.movie.ScreensSchedule")
	proto.RegisterMapType((map[string]*ShowsSchedule)(nil), "rupacinema.movie.ScreensSchedule.ScreensScheduleEntry")
	proto.RegisterType((*DaysSchedule)(nil), "rupacinema.movie.DaysSchedule")
	proto.RegisterMapType((map[int32]*ScreensSchedule)(nil), "rupacinema.movie.DaysSchedule.DaysScheduleEntry")
	proto.RegisterType((*VoteUpMovieRequest)(nil), "rupacinema.movie.VoteUpMovieRequest")
	proto.RegisterType((*GetDayScheduleRequest)(nil), "rupacinema.movie.GetDayScheduleRequest")
	proto.RegisterType((*GetShowScheduleRequest)(nil), "rupacinema.movie.GetShowScheduleRequest")
	proto.RegisterType((*AddVotedMovieRequest)(nil), "rupacinema.movie.AddVotedMovieRequest")
	proto.RegisterType((*CreateMovieDayScheduleRequest)(nil), "rupacinema.movie.CreateMovieDayScheduleRequest")
	proto.RegisterType((*DeleteMovieDayScheduleRequest)(nil), "rupacinema.movie.DeleteMovieDayScheduleRequest")
}

func init() { proto.RegisterFile("schedule.proto", fileDescriptor_d00842e68e05382a) }

var fileDescriptor_d00842e68e05382a = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4f, 0x4f, 0xdb, 0x48,
	0x14, 0xd7, 0x24, 0x24, 0x90, 0x97, 0x04, 0xd8, 0x59, 0x08, 0xc6, 0x61, 0x81, 0x1d, 0xa1, 0x5d,
	0x84, 0x96, 0x78, 0x95, 0xfd, 0x2b, 0x6e, 0x6d, 0x83, 0x10, 0x87, 0xf6, 0x10, 0x0a, 0x52, 0x7b,
	0x49, 0x27, 0xf1, 0x34, 0x44, 0x24, 0x76, 0x6a, 0x3b, 0x80, 0x55, 0xf5, 0x50, 0xd4, 0x4a, 0xbd,
	0x57, 0xea, 0x77, 0xe9, 0x47, 0xa8, 0xd4, 0x5b, 0x4f, 0xbd, 0xf7, 0x83, 0x54, 0xf3, 0x26, 0x0e,
	0x76, 0xec, 0x10, 0x21, 0x21, 0xf5, 0x92, 0xf8, 0xbd, 0x79, 0x7f, 0x7e, 0xbf, 0x37, 0xef, 0xbd,
	0x81, 0x79, 0xb7, 0x75, 0x2a, 0xcc, 0x41, 0x57, 0x54, 0xfa, 0x8e, 0xed, 0xd9, 0x74, 0xd1, 0x19,
	0xf4, 0x79, 0xab, 0x63, 0x89, 0x1e, 0xaf, 0xf4, 0xec, 0xf3, 0x8e, 0xd0, 0xcb, 0x6d, 0xdb, 0x6e,
	0x77, 0x85, 0x81, 0xe7, 0xcd, 0xc1, 0x73, 0x43, 0xf4, 0xfa, 0x9e, 0xaf, 0xcc, 0xf5, 0xb5, 0xe1,
	0x21, 0xef, 0x77, 0x0c, 0x6e, 0x59, 0xb6, 0xc7, 0xbd, 0x8e, 0x6d, 0xb9, 0xc3, 0xd3, 0x3f, 0xf0,
	0xaf, 0xb5, 0xdb, 0x16, 0xd6, 0xae, 0x7b, 0xc1, 0xdb, 0x6d, 0xe1, 0x18, 0x76, 0x1f, 0x2d, 0x12,
	0xac, 0xcb, 0x98, 0x0f, 0x43, 0xa1, 0xc2, 0x40, 0x59, 0x1d, 0xb2, 0x0f, 0x04, 0x0a, 0x47, 0xa7,
	0xf6, 0xc5, 0xd1, 0x10, 0x2e, 0x2d, 0x43, 0xae, 0xdf, 0xe5, 0x7e, 0xc3, 0xeb, 0xf4, 0x84, 0x46,
	0x36, 0xc9, 0x76, 0xae, 0x3e, 0x27, 0x15, 0x8f, 0x3b, 0x3d, 0x41, 0x77, 0x21, 0x83, 0xce, 0x5a,
	0x6a, 0x93, 0x6c, 0xe7, 0xab, 0x2b, 0x95, 0x71, 0x56, 0x95, 0x87, 0xf2, 0xb7, 0xae, 0xac, 0xe8,
	0x1e, 0x14, 0xce, 0x6d, 0x4f, 0x98, 0x0d, 0x14, 0x5d, 0x2d, 0xbd, 0x99, 0xbe, 0xc9, 0x2b, 0x8f,
	0xc6, 0xf8, 0xed, 0xb2, 0xcf, 0x04, 0x8a, 0x12, 0x98, 0x3b, 0x42, 0xf6, 0x04, 0xe6, 0x5d, 0xa9,
	0x68, 0x04, 0xa5, 0xd5, 0x08, 0xc6, 0xab, 0xc6, 0xe3, 0x45, 0x1c, 0xa3, 0xd2, 0xbe, 0xe5, 0x39,
	0x7e, 0xbd, 0xe8, 0x86, 0x75, 0xfa, 0x33, 0xa0, 0x71, 0x23, 0xba, 0x08, 0xe9, 0x33, 0xe1, 0x63,
	0x11, 0x32, 0x75, 0xf9, 0x49, 0xff, 0x86, 0xcc, 0x39, 0xef, 0x0e, 0x02, 0xfe, 0xeb, 0xc9, 0x99,
	0x83, 0x28, 0x75, 0x65, 0xbc, 0x97, 0xfa, 0x9f, 0xb0, 0xaf, 0x04, 0x16, 0x8e, 0x5a, 0x8e, 0x10,
	0xd6, 0x35, 0x21, 0x0e, 0x8b, 0xae, 0x52, 0x8d, 0x53, 0xfa, 0x37, 0x21, 0x70, 0xd4, 0x79, 0x5c,
	0x56, 0xb4, 0x16, 0xdc, 0xa8, 0x56, 0x6f, 0xc1, 0x52, 0x92, 0x61, 0x98, 0x5a, 0x4e, 0x51, 0xfb,
	0x27, 0x4a, 0x6d, 0x63, 0x4a, 0x51, 0xc3, 0xdc, 0x3e, 0x11, 0x28, 0xd4, 0xb8, 0x7f, 0x4d, 0xec,
	0x18, 0x8a, 0x26, 0xf7, 0x63, 0xac, 0xfe, 0x8c, 0xc7, 0x0c, 0xbb, 0x45, 0x04, 0xc5, 0xa7, 0x60,
	0x86, 0x54, 0x7a, 0x13, 0x7e, 0x8a, 0x99, 0x24, 0x5c, 0xd2, 0x7f, 0x51, 0x26, 0xbf, 0x4e, 0xad,
	0x65, 0x98, 0xcb, 0x47, 0x02, 0xf4, 0xc4, 0xf6, 0xc4, 0x71, 0x5f, 0xf5, 0xa4, 0x78, 0x31, 0x10,
	0xae, 0x47, 0x57, 0x61, 0x0e, 0x5d, 0x1b, 0x1d, 0x73, 0x58, 0xb4, 0x59, 0x94, 0x0f, 0x4d, 0xba,
	0x02, 0xb3, 0x03, 0x57, 0x38, 0xf2, 0x24, 0x85, 0x27, 0x59, 0x29, 0x1e, 0x9a, 0xb4, 0x04, 0x59,
	0x75, 0x1d, 0x5a, 0x46, 0xe9, 0x95, 0x24, 0x27, 0x4c, 0x76, 0x9f, 0x9a, 0xb0, 0xac, 0x9a, 0x30,
	0xa9, 0xc0, 0x09, 0x5b, 0x85, 0xb9, 0x0b, 0x21, 0xce, 0x1a, 0x26, 0xf7, 0xb5, 0x34, 0x72, 0x9a,
	0x95, 0x72, 0x8d, 0xfb, 0x74, 0x03, 0xf2, 0xe8, 0x67, 0x0d, 0x7a, 0x4d, 0xe1, 0x68, 0x33, 0x78,
	0x0a, 0x52, 0xf5, 0x08, 0x35, 0xac, 0x0a, 0xcb, 0x07, 0xc2, 0xab, 0x71, 0x7f, 0x44, 0xec, 0x1a,
	0xfd, 0x28, 0x28, 0x89, 0x04, 0x65, 0x0d, 0x28, 0x1d, 0x08, 0x2f, 0xd2, 0xb5, 0x53, 0x9d, 0x28,
	0x85, 0x19, 0x99, 0x16, 0xf9, 0x66, 0xea, 0xf8, 0x1d, 0x62, 0x9b, 0x0e, 0xb3, 0x65, 0x97, 0xb0,
	0x74, 0xcf, 0x34, 0x4f, 0x46, 0x93, 0x7d, 0xb7, 0xe1, 0x23, 0x17, 0x33, 0x13, 0xb9, 0x18, 0xf6,
	0x9a, 0xc0, 0x2f, 0x0f, 0x1c, 0xc1, 0x3d, 0x81, 0x89, 0x6f, 0x55, 0x97, 0xbb, 0xc4, 0x50, 0x13,
	0x5d, 0xf1, 0x03, 0x31, 0x54, 0xdf, 0x64, 0xd5, 0x26, 0x0d, 0x32, 0x3b, 0xb4, 0x0b, 0xf9, 0x50,
	0x8f, 0xd3, 0xad, 0xf8, 0x84, 0xc4, 0x47, 0x40, 0x9f, 0xb4, 0xb6, 0xd9, 0xfa, 0xd5, 0x97, 0x6f,
	0xef, 0x53, 0x1a, 0xfb, 0x19, 0x9f, 0x98, 0x60, 0xe6, 0x1d, 0x43, 0x6e, 0xf3, 0x3d, 0xb2, 0x43,
	0x5d, 0x28, 0x46, 0x3a, 0x80, 0xfe, 0x16, 0x8f, 0x94, 0xd4, 0x22, 0x7a, 0xa9, 0xa2, 0x5e, 0xc1,
	0x4a, 0xf0, 0x44, 0x56, 0xf6, 0xe5, 0x13, 0xc9, 0x18, 0x26, 0x5c, 0x63, 0x2b, 0x49, 0x09, 0xb9,
	0x69, 0xca, 0xa4, 0x6f, 0x09, 0x94, 0x92, 0x2f, 0x9f, 0x1a, 0xf1, 0xf4, 0x37, 0xb6, 0xc9, 0xad,
	0x71, 0x04, 0x5f, 0x12, 0xc7, 0x15, 0x81, 0x52, 0x72, 0x03, 0x24, 0xe1, 0xb8, 0xb1, 0x55, 0x26,
	0xe2, 0xd8, 0x40, 0x1c, 0xab, 0x3b, 0x93, 0x70, 0xd0, 0x77, 0x04, 0xe6, 0xa3, 0x9b, 0x81, 0xfe,
	0x1e, 0x4f, 0x9e, 0xb8, 0x3b, 0xf4, 0xe9, 0xeb, 0x93, 0xed, 0x60, 0xfe, 0x2d, 0xca, 0x26, 0xe4,
	0x37, 0x5e, 0x06, 0x1d, 0xfe, 0x8a, 0x5e, 0xc2, 0xc2, 0xd8, 0xbe, 0xa1, 0xdb, 0x89, 0x50, 0x12,
	0x56, 0x92, 0x3e, 0xe5, 0xbd, 0x65, 0x65, 0x04, 0xb2, 0x4c, 0xc7, 0x3b, 0x51, 0x4e, 0xce, 0xfd,
	0xfc, 0xd3, 0xdc, 0x48, 0xd3, 0xcc, 0x62, 0x09, 0xff, 0xfa, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xa1,
	0x1a, 0x64, 0x42, 0xa7, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShowSchedulerClient is the client API for ShowScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShowSchedulerClient interface {
	// Votes for a movie to be played at cinema. Requires authentication
	VoteUpMovie(ctx context.Context, in *VoteUpMovieRequest, opts ...grpc.CallOption) (*proto1.Movie, error)
	// Adds a new movie to voted movies for a day's show. Requires authentication
	AddVotedMovie(ctx context.Context, in *AddVotedMovieRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates schedule for a particular day and show. Requires authentication
	CreateMovieDaySchedule(ctx context.Context, in *CreateMovieDayScheduleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete schedule for a particular show in a day. Requires authentication
	DeleteMovieDaySchedule(ctx context.Context, in *DeleteMovieDayScheduleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Retrieves day schedule for a particular week day
	GetDaySchedule(ctx context.Context, in *GetDayScheduleRequest, opts ...grpc.CallOption) (*ScreensSchedule, error)
	// Retrieves show for a particular week day and screen
	GetShowSchedule(ctx context.Context, in *GetShowScheduleRequest, opts ...grpc.CallOption) (*ShowSchedule, error)
}

type showSchedulerClient struct {
	cc *grpc.ClientConn
}

func NewShowSchedulerClient(cc *grpc.ClientConn) ShowSchedulerClient {
	return &showSchedulerClient{cc}
}

func (c *showSchedulerClient) VoteUpMovie(ctx context.Context, in *VoteUpMovieRequest, opts ...grpc.CallOption) (*proto1.Movie, error) {
	out := new(proto1.Movie)
	err := c.cc.Invoke(ctx, "/rupacinema.movie.ShowScheduler/VoteUpMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSchedulerClient) AddVotedMovie(ctx context.Context, in *AddVotedMovieRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rupacinema.movie.ShowScheduler/AddVotedMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSchedulerClient) CreateMovieDaySchedule(ctx context.Context, in *CreateMovieDayScheduleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rupacinema.movie.ShowScheduler/CreateMovieDaySchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSchedulerClient) DeleteMovieDaySchedule(ctx context.Context, in *DeleteMovieDayScheduleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rupacinema.movie.ShowScheduler/DeleteMovieDaySchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSchedulerClient) GetDaySchedule(ctx context.Context, in *GetDayScheduleRequest, opts ...grpc.CallOption) (*ScreensSchedule, error) {
	out := new(ScreensSchedule)
	err := c.cc.Invoke(ctx, "/rupacinema.movie.ShowScheduler/GetDaySchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSchedulerClient) GetShowSchedule(ctx context.Context, in *GetShowScheduleRequest, opts ...grpc.CallOption) (*ShowSchedule, error) {
	out := new(ShowSchedule)
	err := c.cc.Invoke(ctx, "/rupacinema.movie.ShowScheduler/GetShowSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShowSchedulerServer is the server API for ShowScheduler service.
type ShowSchedulerServer interface {
	// Votes for a movie to be played at cinema. Requires authentication
	VoteUpMovie(context.Context, *VoteUpMovieRequest) (*proto1.Movie, error)
	// Adds a new movie to voted movies for a day's show. Requires authentication
	AddVotedMovie(context.Context, *AddVotedMovieRequest) (*empty.Empty, error)
	// Creates schedule for a particular day and show. Requires authentication
	CreateMovieDaySchedule(context.Context, *CreateMovieDayScheduleRequest) (*empty.Empty, error)
	// Delete schedule for a particular show in a day. Requires authentication
	DeleteMovieDaySchedule(context.Context, *DeleteMovieDayScheduleRequest) (*empty.Empty, error)
	// Retrieves day schedule for a particular week day
	GetDaySchedule(context.Context, *GetDayScheduleRequest) (*ScreensSchedule, error)
	// Retrieves show for a particular week day and screen
	GetShowSchedule(context.Context, *GetShowScheduleRequest) (*ShowSchedule, error)
}

func RegisterShowSchedulerServer(s *grpc.Server, srv ShowSchedulerServer) {
	s.RegisterService(&_ShowScheduler_serviceDesc, srv)
}

func _ShowScheduler_VoteUpMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteUpMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSchedulerServer).VoteUpMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rupacinema.movie.ShowScheduler/VoteUpMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSchedulerServer).VoteUpMovie(ctx, req.(*VoteUpMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowScheduler_AddVotedMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVotedMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSchedulerServer).AddVotedMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rupacinema.movie.ShowScheduler/AddVotedMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSchedulerServer).AddVotedMovie(ctx, req.(*AddVotedMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowScheduler_CreateMovieDaySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieDayScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSchedulerServer).CreateMovieDaySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rupacinema.movie.ShowScheduler/CreateMovieDaySchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSchedulerServer).CreateMovieDaySchedule(ctx, req.(*CreateMovieDayScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowScheduler_DeleteMovieDaySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieDayScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSchedulerServer).DeleteMovieDaySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rupacinema.movie.ShowScheduler/DeleteMovieDaySchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSchedulerServer).DeleteMovieDaySchedule(ctx, req.(*DeleteMovieDayScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowScheduler_GetDaySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDayScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSchedulerServer).GetDaySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rupacinema.movie.ShowScheduler/GetDaySchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSchedulerServer).GetDaySchedule(ctx, req.(*GetDayScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowScheduler_GetShowSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSchedulerServer).GetShowSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rupacinema.movie.ShowScheduler/GetShowSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSchedulerServer).GetShowSchedule(ctx, req.(*GetShowScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShowScheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rupacinema.movie.ShowScheduler",
	HandlerType: (*ShowSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VoteUpMovie",
			Handler:    _ShowScheduler_VoteUpMovie_Handler,
		},
		{
			MethodName: "AddVotedMovie",
			Handler:    _ShowScheduler_AddVotedMovie_Handler,
		},
		{
			MethodName: "CreateMovieDaySchedule",
			Handler:    _ShowScheduler_CreateMovieDaySchedule_Handler,
		},
		{
			MethodName: "DeleteMovieDaySchedule",
			Handler:    _ShowScheduler_DeleteMovieDaySchedule_Handler,
		},
		{
			MethodName: "GetDaySchedule",
			Handler:    _ShowScheduler_GetDaySchedule_Handler,
		},
		{
			MethodName: "GetShowSchedule",
			Handler:    _ShowScheduler_GetShowSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule.proto",
}
